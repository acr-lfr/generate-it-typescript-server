import { {% for interface in importInterfaces(operations) -%}{{ interface }},{%- endfor %} } from '@/http/nodegen/interfaces';
{% if pathMethodsHaveAttr(operations, 'security', ['jwtToken', 'JwtToken']) %}import { {{ nodegenRc.helpers.stub.jwtType }} } from '@/http/nodegen/interfaces';{% endif %}
{% if pathMethodsHaveAttr(operations, 'x-passRequest') %}import NodegenRequest from '@/http/interfaces/NodegenRequest';{% endif %}
{% if pathMethodsHaveAttr(operations, 'x-passResponse') %}import { Response } from 'express';{% endif %}

export interface {{ ucFirst(operation_name) }}DomainInterface {
  {% for op in operations -%}
    {% for method, path in op.path -%}
      {% if isValidMethod(method) %}
        {% set securityNames = getSecurityNames(path, swagger) -%}
        {% set description = path.description | trim if path.description else 'No description written' %}
        {% set docBlock = '
  /**
   * Operation ID: ' + path.operationId + '
   * Summary: ' + path.summary %}
  {% set docBlock = docBlock + '
   * Description: ' + description %}

  {% if securityNames %}
  {% set docBlock = docBlock + '
   * Security header(s): ' + securityNames %}
  {% endif %}
  {% if path['x-permission'] %}
  {% set docBlock = docBlock + '
   * Permission string: ' + path['x-permission'] %}
  {% endif %}
  {% if path['x-async-validators'] %}
  {% set docBlock = docBlock + '
   * Pre-domain async-validators: ' + path['x-async-validators'] %}
  {% endif %}
  {% if not securityNames and not path['x-permission'] and not path['x-async-validators'] %}
  {% set docBlock = docBlock + '
   * No additional middleware used' %}
  {% endif %}
  {% set docBlock = docBlock + '
  **/' %}

  {{ docBlock }}
  {%- set singleSuccessResponse = getSingleSuccessResponse(path['x-response-definitions']) %}
  {{ path.operationId }} ({{ pathParamsToDomainParams(method, path, true, false, 'params') }}): Promise<{{ path['x-response-definitions'][singleSuccessResponse] if singleSuccessResponse else 'any' }}>;
      {% endif %}
    {%- endfor %}
  {%- endfor %}
}
