import app from '@/app';
import { HttpStatusCode } from '@/http/nodegen/errors';
import { NodegenRequest } from '@/http/nodegen/interfaces';
{% if pathMethodsHaveAttr(operations, 'security', 'jwtToken') -%}
import { JwtAccess } from '@/http/nodegen/interfaces/JwtAccess';
{% endif -%}
import { baseUrl as root } from '@/http/nodegen/routesImporter';
import { default as AccessTokenService } from '@/services/AccessTokenService';
import { NextFunction, Response } from 'express';
import supertest from 'supertest';

{% if not pathMethodsHaveAttr(operations, 'security', 'jwtToken') -%}
type JwtAccess = Record<string, any>;

{% endif -%}
jest.mock('morgan', () => () => (req: NodegenRequest, res: Response, next: NextFunction) => next());

export const baseUrl = root.replace(/\/*$/, '');
export let request: supertest.SuperTest<supertest.Test>;

export const ResponseCodes = {
  delete: [HttpStatusCode.OK, HttpStatusCode.NO_CONTENT],
  get: [HttpStatusCode.OK],
  patch: [HttpStatusCode.NO_CONTENT],
  post: [HttpStatusCode.CREATED],
  put: [HttpStatusCode.CREATED, HttpStatusCode.NO_CONTENT],
};

export const setupTeardown = {
  beforeAll: async () => {
    request = supertest((await app(0)).expressApp);
  },
  afterEach: () => {
    jest.restoreAllMocks();
    jest.clearAllMocks();
    jest.resetAllMocks();
  },
  beforeEach: () => {
    mockAuth();
  },
};

export const defaultSetupTeardown = () => {
  beforeAll(setupTeardown.beforeAll);
  afterEach(setupTeardown.afterEach);
  beforeEach(setupTeardown.beforeEach);
};

export const mockAuth = (jwtData?: JwtAccess): JwtAccess => {
  const jwt: JwtAccess = jwtData ?? { subject: 'qxtest', dealerCode: '99999', userId: 1 };

  jest
    .spyOn(AccessTokenService, 'validateRequest')
    .mockImplementation((req: NodegenRequest, res: Response, next: NextFunction) => {
      req.jwtData = jwt;
      req.originalToken = 'gobledygoop';
      return next();
    });

  return jwt;
};

{{ getContext() | anon("ctx => Object.keys(ctx.operationFiles).map(key => `export * from '@/http/nodegen/tests/${key.charAt(0).toUpperCase()}${key.slice(1)}Test.data';`).join('\\n')") }}
